
1）会议添加前相关数据获取   接口：DevOpsMeetingSelectListCmd(平台的)         APPMeetingSelectListCmd(APP的)   请求结构：		public class MeetingSelectListRequest	{  		public String userAccountName;//当前登陆人	}   返回结构：	public class MeetingSelectListResponse	{ 	  	public RequestAndResponse resp;//这个和通用的一致 	 	public MeetingTypeItem[] typeItem;//会议类型  		public MeetingUserItem[] userItem;//相关人员  		public MeetingRoomItem[] roomItem;//会议室	}	public class MeetingTypeItem	{ 		public int typeId;  		public String typeCn;	}	public class MeetingUserItem	{ 	 	public int userId;  		public String nameCn;		public String account;	}	public class MeetingRoomItem	{  		public int roomId;  		public String roomCn;	}（2）用户获取    接口：DevOpsMeetingUserSelectCmd(平台端)	 APPMeetingUserSelectCmd(APP端)   请求结构：	public class MeetingUserSelectRequest	{  		public String userName;  		public String userAccountName;	}   返回结构：		public class MeetingUserSelectResponse	{  		public RequestAndResponse resp;//与通用一致  		public MeetingUserMessage[] item;//人员信息	}	public class MeetingUserMessage	{  		public int userId;//用户Id  		public String userName;//用户名称  		public String userTel;//联系方式  		public String viewRole;//角色名称	}（3）会议添加    接口：DevOpsMeetingInfoAddCmd(平台端)	 APPMeetingInfoAddCmd(APP的)   请求结构：		public class MeetingInfoAddRequest	{  		public int id;//id此处传值为-1  		public String subjectCn;//会议名称  		public String subjectEn;//会议名称为""  		public String content;//会议内容  		public String startTime;//开始时间,"yyyy-MM-dd HH:mm:ss"  		public int durationTime;//会议持续时间,分钟为单位  		public String sponsor;//发起人  		public String participant;//参会人，多个，用“,”隔开(英文的逗号)  		public String timeLimit;//签到时间限制  		public String createUser;//创建人，当前登陆人  		public int companyId;//公司,-1  		public int meetingRoomId;//会议室Id		public String reminderTime;//会议提醒时间   		public String userAccountName;//当前登陆人	}   返回结构：		public class RequestAndResponse	{	  		public String requestCommand;  		public String responseCommand;  		public String failReason;	}（4）会议删除  接口：DevOpsMeetingInfoDeleteCmd(平台端)  	  请求结构：		public class MeetingInfoDeleteRequest	{  		public int meetingId;//会议id  		public String userAccountName;	}  返回结构：		public class RequestAndResponse	{  		public String requestCommand;  		public String responseCommand;  		public String failReason;	}（5）会议修改   接口：DevOpsMeetingInfoUpdateCmd	  请求结构：	public class MeetingInfoUpdateRequest	{  		public int id;  		public String subjectCn;  		public String subjectEn;  		public String content;  		public int meetingType;  		public String startTime;  		public int durationTime;  		public String sponsor;  		public String participant;  		public String timeLimit;  		public String createUser;  		public int companyId;  		public int meetingRoomId;  		public String reminderTime;    		public String userAccountName;	}  返回结构：	public class RequestAndResponse	{  		public String requestCommand;  		public String responseCommand;  		public String failReason;	}（6）会议查询  接口：DevOpsMeetingInfoSelectCmd	  请求结构：		public class MeetingInfoSelectRequest	{  		public String meetingCn;  		public int meetingType;  		public String startTime;  		public String endTime;    		public int index;  		public int number;  		public String userAccountName;	}  返回结构：	public class MeetingInfoSelectResponse	{  		public RequestAndResponse resp;  		public MeetingInfoItem[] item;    		public int totalNumber;	}	public class MeetingInfoItem	{  		public int id;  		public String subjectCn;  		public String subjectEn;  		public String content;  		public int meetingTypeId;  		public String meetingType;  		public String startTime;  		public int durationTime;  		public String sponsor;  		public Participant[] participant;//参会人  		public String timeLimit;  		public String createUser;  		public int meetingRoomId;  		public String meetingRoom; 	 	public String reminderTime;	}	public class Participant	{  		public int userId;  		public String userCn;	}



for (var i = 0; i < meetingJoinPara.length; i++) {		for (var j = 0; j < $(".each-checkbox").length; j++) {			if (meetingJoinPara[i] == $(".each-checkbox").eq(j).attr("theId")) {				$(".each-checkbox").eq(j).prop("checked", true);			}		}	}	$(".all-checkbox").change(function() {		if ($(this).prop("checked")) {			theData_length = realData.length;			$(".each-checkbox").prop("checked", true);			for (var i = 0; i < $(".each-checkbox").length; i++) {				if (((meetingJoinPara.indexOf(parseInt($(".each-checkbox").eq(i).attr('theId')))) == -1)) {					meetingJoinPara.push(parseInt($(".each-checkbox").eq(i).attr('theId')));				}			}			console.log(meetingJoinPara);		} else {			theData_length = 0;			$(".each-checkbox").prop("checked", false);			for (var i = 0; i < $(".each-checkbox").length; i++) {				meetingJoinPara.pop();			}			console.log(meetingJoinPara);		}	})	$(".each-checkbox").change(function() {		if ($(this).prop("checked")) {			for (var i = 0; i < $(".each-checkbox").length; i++) {				if (((meetingJoinPara.indexOf(parseInt($(this).attr('theId')))) == -1)) {					meetingJoinPara.push(parseInt($(this).attr('theId')));				}			}			console.log(meetingJoinPara);			theData_length++;			if (theData_length == realData.length) {				$(".all-checkbox").prop("checked", true);			} else {				$(".all-checkbox").prop("checked", false);			}		} else {			theData_length--;			var index = meetingJoinPara.indexOf(parseInt($(this).attr("theId")));			console.log(parseInt($(this).attr("theId")));			console.log(meetingJoinPara);			console.log(index);			if (!(index == -1)) {				meetingJoinPara.splice(index, 1);				console.log(meetingJoinPara);			}			if (theData_length == realData.length) {				$(".all-checkbox").prop("checked", true);			} else {				$(".all-checkbox").prop("checked", false);			}		}	})}